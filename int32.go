// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Int32{}
	_ runtime.ContextValidatable = &Int32{}
	_ runtime.Validatable        = &Int32Slice{}
	_ runtime.ContextValidatable = &Int32Slice{}
)

// Int32 represents a int32 that may be null
type Int32 struct {
	Valid   bool // Valid is true if value is not null and valid int32
	Value   int32
}

// NewInt32 creates a new Int32 object
func NewInt32(val *int32) Int32 {
    if val == nil {
        return Int32{}
    }
    return Int32{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (i *Int32) Get() *int32 {
    if !i.Valid {
        return nil
    }
    return &i.Value
}

// Set sets the value and valid flag to true
func (i *Int32) Set(val int32) {
    i.Valid = true
    i.Value = val
}

func (i *Int32) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        i.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &i.Value); err != nil {
        return err
    }
    i.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (i *Int32) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (i *Int32) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Int32Slice represents a []int32 that may be null
type Int32Slice struct {
	Valid   bool // Valid is true if value is not null
	Value   []int32
}


// NewInt32Slice creates a new Int32Slice object
func NewInt32Slice(val []int32) Int32Slice {
    if val == nil {
        return Int32Slice{}
    }
    return Int32Slice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (i *Int32Slice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        i.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &i.Value); err != nil {
        return err
    }
    i.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (i *Int32Slice) Get() *[]int32 {
    if !i.Valid {
        return nil
    }
    return &i.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (i *Int32Slice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (i *Int32Slice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}