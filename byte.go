// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Byte{}
	_ runtime.ContextValidatable = &Byte{}
	_ runtime.Validatable        = &ByteSlice{}
	_ runtime.ContextValidatable = &ByteSlice{}
)

// Byte represents a byte that may be null
type Byte struct {
	Valid   bool // Valid is true if value is not null and valid byte
	Value   byte
}

// NewByte creates a new Byte object
func NewByte(val *byte) Byte {
    if val == nil {
        return Byte{}
    }
    return Byte{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (b *Byte) Get() *byte {
    if !b.Valid {
        return nil
    }
    return &b.Value
}

// Set sets the value and valid flag to true
func (b *Byte) Set(val byte) {
    b.Valid = true
    b.Value = val
}

func (b *Byte) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        b.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &b.Value); err != nil {
        return err
    }
    b.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (b *Byte) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (b *Byte) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// ByteSlice represents a []byte that may be null
type ByteSlice struct {
	Valid   bool // Valid is true if value is not null
	Value   []byte
}


// NewByteSlice creates a new ByteSlice object
func NewByteSlice(val []byte) ByteSlice {
    if val == nil {
        return ByteSlice{}
    }
    return ByteSlice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (b *ByteSlice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        b.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &b.Value); err != nil {
        return err
    }
    b.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (b *ByteSlice) Get() *[]byte {
    if !b.Valid {
        return nil
    }
    return &b.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (b *ByteSlice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (b *ByteSlice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}