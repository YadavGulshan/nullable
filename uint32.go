// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Uint32{}
	_ runtime.ContextValidatable = &Uint32{}
	_ runtime.Validatable        = &Uint32Slice{}
	_ runtime.ContextValidatable = &Uint32Slice{}
)

// Uint32 represents a uint32 that may be null
type Uint32 struct {
	Valid   bool // Valid is true if value is not null and valid uint32
	Value   uint32
}

// NewUint32 creates a new Uint32 object
func NewUint32(val *uint32) Uint32 {
    if val == nil {
        return Uint32{}
    }
    return Uint32{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint32) Get() *uint32 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Set sets the value and valid flag to true
func (u *Uint32) Set(val uint32) {
    u.Valid = true
    u.Value = val
}

func (u *Uint32) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) || bytes.Equal(data, empty) || bytes.Equal(data, []byte("")) {
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint32) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint32) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Uint32Slice represents a []uint32 that may be null
type Uint32Slice struct {
	Valid   bool // Valid is true if value is not null
	Value   []uint32
}


// NewUint32Slice creates a new Uint32Slice object
func NewUint32Slice(val []uint32) Uint32Slice {
    if val == nil {
        return Uint32Slice{}
    }
    return Uint32Slice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (u *Uint32Slice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint32Slice) Get() *[]uint32 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint32Slice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint32Slice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}