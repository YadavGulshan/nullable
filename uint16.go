// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Uint16{}
	_ runtime.ContextValidatable = &Uint16{}
	_ runtime.Validatable        = &Uint16Slice{}
	_ runtime.ContextValidatable = &Uint16Slice{}
)

// Uint16 represents a uint16 that may be null
type Uint16 struct {
	Valid   bool // Valid is true if value is not null and valid uint16
	Value   uint16
}

// NewUint16 creates a new Uint16 object
func NewUint16(val *uint16) Uint16 {
    if val == nil {
        return Uint16{}
    }
    return Uint16{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint16) Get() *uint16 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Set sets the value and valid flag to true
func (u *Uint16) Set(val uint16) {
    u.Valid = true
    u.Value = val
}

func (u *Uint16) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint16) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint16) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Uint16Slice represents a []uint16 that may be null
type Uint16Slice struct {
	Valid   bool // Valid is true if value is not null
	Value   []uint16
}


// NewUint16Slice creates a new Uint16Slice object
func NewUint16Slice(val []uint16) Uint16Slice {
    if val == nil {
        return Uint16Slice{}
    }
    return Uint16Slice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (u *Uint16Slice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint16Slice) Get() *[]uint16 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint16Slice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint16Slice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}