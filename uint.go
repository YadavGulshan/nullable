// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Uint{}
	_ runtime.ContextValidatable = &Uint{}
	_ runtime.Validatable        = &UintSlice{}
	_ runtime.ContextValidatable = &UintSlice{}
)

// Uint represents a uint that may be null
type Uint struct {
	Valid   bool // Valid is true if value is not null and valid uint
	Value   uint
}

// NewUint creates a new Uint object
func NewUint(val *uint) Uint {
    if val == nil {
        return Uint{}
    }
    return Uint{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint) Get() *uint {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Set sets the value and valid flag to true
func (u *Uint) Set(val uint) {
    u.Valid = true
    u.Value = val
}

func (u *Uint) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// UintSlice represents a []uint that may be null
type UintSlice struct {
	Valid   bool // Valid is true if value is not null
	Value   []uint
}


// NewUintSlice creates a new UintSlice object
func NewUintSlice(val []uint) UintSlice {
    if val == nil {
        return UintSlice{}
    }
    return UintSlice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (u *UintSlice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *UintSlice) Get() *[]uint {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *UintSlice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *UintSlice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}