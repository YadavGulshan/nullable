// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Int{}
	_ runtime.ContextValidatable = &Int{}
	_ runtime.Validatable        = &IntSlice{}
	_ runtime.ContextValidatable = &IntSlice{}
)

// Int represents a int that may be null
type Int struct {
	Valid   bool // Valid is true if value is not null and valid int
	Value   int
}

// NewInt creates a new Int object
func NewInt(val *int) Int {
    if val == nil {
        return Int{}
    }
    return Int{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (i *Int) Get() *int {
    if !i.Valid {
        return nil
    }
    return &i.Value
}

// Set sets the value and valid flag to true
func (i *Int) Set(val int) {
    i.Valid = true
    i.Value = val
}

func (i *Int) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) || bytes.Equal(data, empty) || bytes.Equal(data, []byte("")) {
        return nil
    }
    if err := json.Unmarshal(data, &i.Value); err != nil {
        return err
    }
    i.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (i *Int) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (i *Int) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// IntSlice represents a []int that may be null
type IntSlice struct {
	Valid   bool // Valid is true if value is not null
	Value   []int
}


// NewIntSlice creates a new IntSlice object
func NewIntSlice(val []int) IntSlice {
    if val == nil {
        return IntSlice{}
    }
    return IntSlice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (i *IntSlice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        i.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &i.Value); err != nil {
        return err
    }
    i.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (i *IntSlice) Get() *[]int {
    if !i.Valid {
        return nil
    }
    return &i.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (i *IntSlice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (i *IntSlice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}