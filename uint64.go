// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Uint64{}
	_ runtime.ContextValidatable = &Uint64{}
	_ runtime.Validatable        = &Uint64Slice{}
	_ runtime.ContextValidatable = &Uint64Slice{}
)

// Uint64 represents a uint64 that may be null
type Uint64 struct {
	Valid   bool // Valid is true if value is not null and valid uint64
	Value   uint64
}

// NewUint64 creates a new Uint64 object
func NewUint64(val *uint64) Uint64 {
    if val == nil {
        return Uint64{}
    }
    return Uint64{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint64) Get() *uint64 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Set sets the value and valid flag to true
func (u *Uint64) Set(val uint64) {
    u.Valid = true
    u.Value = val
}

func (u *Uint64) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint64) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint64) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Uint64Slice represents a []uint64 that may be null
type Uint64Slice struct {
	Valid   bool // Valid is true if value is not null
	Value   []uint64
}


// NewUint64Slice creates a new Uint64Slice object
func NewUint64Slice(val []uint64) Uint64Slice {
    if val == nil {
        return Uint64Slice{}
    }
    return Uint64Slice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (u *Uint64Slice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint64Slice) Get() *[]uint64 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint64Slice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint64Slice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}