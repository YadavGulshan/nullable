// Code generated by go generate; DO NOT EDIT.
// This file was generated by scripts/models/gen_nullable_types.go
package nullable


import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// Compile time validation that our types implement the expected interfaces
var (
	_ runtime.Validatable        = &Uint8{}
	_ runtime.ContextValidatable = &Uint8{}
	_ runtime.Validatable        = &Uint8Slice{}
	_ runtime.ContextValidatable = &Uint8Slice{}
)

// Uint8 represents a uint8 that may be null
type Uint8 struct {
	Valid   bool // Valid is true if value is not null and valid uint8
	Value   uint8
}

// NewUint8 creates a new Uint8 object
func NewUint8(val *uint8) Uint8 {
    if val == nil {
        return Uint8{}
    }
    return Uint8{
        Valid: true,
        Value: *val,
    }
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint8) Get() *uint8 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Set sets the value and valid flag to true
func (u *Uint8) Set(val uint8) {
    u.Valid = true
    u.Value = val
}

func (u *Uint8) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint8) Validate(formats strfmt.Registry) error {
    return nil 
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Uint8Slice represents a []uint8 that may be null
type Uint8Slice struct {
	Valid   bool // Valid is true if value is not null
	Value   []uint8
}


// NewUint8Slice creates a new Uint8Slice object
func NewUint8Slice(val []uint8) Uint8Slice {
    if val == nil {
        return Uint8Slice{}
    }
    return Uint8Slice{
        Valid: true,
        Value: val,
    }
}

// UnmarshalJSON implements json.Marshaler interface.
func (u *Uint8Slice) UnmarshalJSON(data []byte) error {
    if bytes.Equal(data, null) {
        u.Valid = false
        return nil
    }
    if err := json.Unmarshal(data, &u.Value); err != nil {
        return err
    }
    u.Valid = true
    return nil
}

// Returns nil if not present or valid. Otherwise it will
// return a pointer to the value.
func (u *Uint8Slice) Get() *[]uint8 {
    if !u.Valid {
        return nil
    }
    return &u.Value
}

// Validate implements runtime.Validateable interface from github.com/go-openapi/runtime
func (u *Uint8Slice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate implements runtime.ContextValidatable from github.com/go-openapi/runtime
func (u *Uint8Slice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}